package com.api.educationalsystem.controllers;

import com.api.educationalsystem.dto.UserDTO;
import com.api.educationalsystem.models.Result;
import com.api.educationalsystem.models.User;
import com.api.educationalsystem.repositories.UserRepository;
import com.api.educationalsystem.utils.JWTUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Map;
import java.util.Date;

@RestController
@RequestMapping(path = "/users")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private String message;

    private Map<String, Object> data;

    HttpHeaders headers;

    @PostMapping(path = "/signup") // Map ONLY POST Requests
    public ResponseEntity<Result> addNewUser(
            @RequestParam String username,
            @RequestParam String email,
            @RequestParam String password,
            @RequestParam String role,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date dob) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User existingUser = userRepository.findByUsername(username);

        if (existingUser != null) {
            message = "Username already exists";
            data = null;

            return new ResponseEntity<Result>(Result.of(message, data), null, HttpStatus.CONFLICT);
        }

        User user = new User();
        user.setUsername(username);
        user.setEmail(email);
        user.setPassword(password);
        user.setRole(role);
        user.setDob(dob);
        user.setSuspended(false);

        User savedUser = userRepository.save(user);

        Date exp = new Date();
        exp.setTime(exp.getTime() + 1000 * 60 * 60 * 24 * 7); // 7 days

        message = "User created successfully";
        data = Map.of("user", UserDTO.of(savedUser));

        String authToken = "Bearer " + JWTUtils.generateToken(exp, data);

        headers = new HttpHeaders();
        headers.set(HttpHeaders.AUTHORIZATION, authToken);
        headers.add(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, HttpHeaders.AUTHORIZATION);

        return new ResponseEntity<Result>(Result.of(message, data), headers, HttpStatus.OK);
    }

    @PostMapping(path = "/login")
    public ResponseEntity<Result> login(
            @RequestParam String email,
            @RequestParam String password) {
        User user = userRepository.findByEmailAndPassword(email, password);

        if (user == null) {
            message = "Invalid username or password";
            data = null;

            return new ResponseEntity<Result>(Result.of(message, data), null, HttpStatus.UNAUTHORIZED);
        }

        Date exp = new Date();
        exp.setTime(exp.getTime() + 1000 * 60 * 60 * 24 * 7); // 7 days

        message = "Login successful";
        data = Map.of("user", UserDTO.of(user));

        String authToken = "Bearer " + JWTUtils.generateToken(exp, data);

        headers = new HttpHeaders();
        headers.set(HttpHeaders.AUTHORIZATION, authToken);

        return new ResponseEntity<Result>(Result.of(message, data), headers, HttpStatus.OK);
    }

    // Example: http://127.0.0.1:8080/api/users/all
    // TODO: Remove this method
    @GetMapping(path = "/all")
    public ResponseEntity<Iterable<User>> getAllUsers() {
        // This returns a JSON or XML with the users
        return new ResponseEntity<>(userRepository.findAll(), HttpStatus.OK);
    }
}
